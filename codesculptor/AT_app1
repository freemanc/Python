"""
Provided code for Application portion of Module 1

Imports physics citation graph 
"""

# general imports
import urllib2
import simpleplot
import math

# Set timeout for CodeSkulptor if necessary
import codeskulptor
codeskulptor.set_timeout(20)


###################################
# Code for loading citation graph

CITATION_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_phys-cite.txt"

def load_graph(graph_url):
    """
    Function that loads a graph given the URL
    for a text representation of the graph
    
    Returns a dictionary that models a graph
    """
    graph_file = urllib2.urlopen(graph_url)
    graph_text = graph_file.read()
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[ : -1]
    
    print "Loaded graph with", len(graph_lines), "nodes"
    
    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1 : -1]:
            answer_graph[node].add(int(neighbor))

    return answer_graph

###################################
# Helper functions

def make_complete_graph(num_nodes):
    """
    Function outputs a complete digraph, where the number of nodes is the input
    """
    output = {}
    if num_nodes > 0:
        for node in range(num_nodes):
            in_neighbor = set(range(num_nodes))
            in_neighbor.remove(node)
            output[node] = in_neighbor
    return output

def compute_in_degrees(digraph):
    """
    Computes the in-degrees of each node for the given digraph
    """
    output = {}
    for node, out_neighbors in digraph.items():
        output[node] = output.get(node, 0)
        for nbr in out_neighbors:
            output[nbr] = output.get(nbr, 0) + 1
    return output

def in_degree_distribution(digraph):
    """
    Computes the unnormalized in-degree distribution of the given digraph
    """
    output = {}
    in_degree = compute_in_degrees(digraph)
    for in_degree in in_degree.values():
        output[in_degree] = output.get(in_degree, 0) + 1
    return output
    
def normalize_and_log(distribution):
    """
    normalize and log-log a distribution (sum to 1)
    """
    output = {}
    total = float(sum(distribution.values()))
    for key in distribution:
        if key != 0:
            log_key = math.log(key)
            output[log_key] = math.log(distribution[key] / total)
    return output

citation_graph = load_graph(CITATION_URL)

citation_distribution = normalize_and_log(in_degree_distribution(citation_graph))

print citation_distribution

simpleplot.plot_scatter('Citation Graph In-Degree Distribution (log-log)', 400, 300, 'log(x)', 'log(y)', [citation_distribution])


